// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package model

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - Address
//  - PubKey
//  - Shares
type Delegator struct {
  Address string `thrift:"address,1" db:"address" json:"address"`
  PubKey string `thrift:"pubKey,2" db:"pubKey" json:"pubKey"`
  Shares int64 `thrift:"shares,3" db:"shares" json:"shares"`
}

func NewDelegator() *Delegator {
  return &Delegator{}
}


func (p *Delegator) GetAddress() string {
  return p.Address
}

func (p *Delegator) GetPubKey() string {
  return p.PubKey
}

func (p *Delegator) GetShares() int64 {
  return p.Shares
}
func (p *Delegator) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Delegator)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Address = v
}
  return nil
}

func (p *Delegator)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PubKey = v
}
  return nil
}

func (p *Delegator)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Shares = v
}
  return nil
}

func (p *Delegator) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Delegator"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Delegator) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("address", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:address: ", p), err) }
  if err := oprot.WriteString(string(p.Address)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:address: ", p), err) }
  return err
}

func (p *Delegator) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pubKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pubKey: ", p), err) }
  if err := oprot.WriteString(string(p.PubKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pubKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pubKey: ", p), err) }
  return err
}

func (p *Delegator) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("shares", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:shares: ", p), err) }
  if err := oprot.WriteI64(int64(p.Shares)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.shares (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:shares: ", p), err) }
  return err
}

func (p *Delegator) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Delegator(%+v)", *p)
}

// Attributes:
//  - Details
//  - Identity
//  - Moniker
//  - Website
type CandidateDescription struct {
  Details string `thrift:"details,1" db:"details" json:"details"`
  Identity string `thrift:"identity,2" db:"identity" json:"identity"`
  Moniker string `thrift:"moniker,3" db:"moniker" json:"moniker"`
  Website string `thrift:"website,4" db:"website" json:"website"`
}

func NewCandidateDescription() *CandidateDescription {
  return &CandidateDescription{}
}


func (p *CandidateDescription) GetDetails() string {
  return p.Details
}

func (p *CandidateDescription) GetIdentity() string {
  return p.Identity
}

func (p *CandidateDescription) GetMoniker() string {
  return p.Moniker
}

func (p *CandidateDescription) GetWebsite() string {
  return p.Website
}
func (p *CandidateDescription) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CandidateDescription)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Details = v
}
  return nil
}

func (p *CandidateDescription)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Identity = v
}
  return nil
}

func (p *CandidateDescription)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Moniker = v
}
  return nil
}

func (p *CandidateDescription)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Website = v
}
  return nil
}

func (p *CandidateDescription) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CandidateDescription"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CandidateDescription) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("details", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:details: ", p), err) }
  if err := oprot.WriteString(string(p.Details)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.details (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:details: ", p), err) }
  return err
}

func (p *CandidateDescription) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("identity", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:identity: ", p), err) }
  if err := oprot.WriteString(string(p.Identity)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.identity (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:identity: ", p), err) }
  return err
}

func (p *CandidateDescription) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("moniker", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:moniker: ", p), err) }
  if err := oprot.WriteString(string(p.Moniker)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.moniker (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:moniker: ", p), err) }
  return err
}

func (p *CandidateDescription) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("website", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:website: ", p), err) }
  if err := oprot.WriteString(string(p.Website)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.website (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:website: ", p), err) }
  return err
}

func (p *CandidateDescription) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CandidateDescription(%+v)", *p)
}

// Attributes:
//  - Address
//  - PubKey
//  - Shares
//  - VotingPower
//  - Description
//  - Delegators
type Candidate struct {
  Address string `thrift:"address,1" db:"address" json:"address"`
  PubKey string `thrift:"pubKey,2" db:"pubKey" json:"pubKey"`
  Shares int64 `thrift:"shares,3" db:"shares" json:"shares"`
  VotingPower float64 `thrift:"votingPower,4" db:"votingPower" json:"votingPower"`
  Description *CandidateDescription `thrift:"description,5" db:"description" json:"description"`
  Delegators []*Delegator `thrift:"delegators,6" db:"delegators" json:"delegators"`
}

func NewCandidate() *Candidate {
  return &Candidate{}
}


func (p *Candidate) GetAddress() string {
  return p.Address
}

func (p *Candidate) GetPubKey() string {
  return p.PubKey
}

func (p *Candidate) GetShares() int64 {
  return p.Shares
}

func (p *Candidate) GetVotingPower() float64 {
  return p.VotingPower
}
var Candidate_Description_DEFAULT *CandidateDescription
func (p *Candidate) GetDescription() *CandidateDescription {
  if !p.IsSetDescription() {
    return Candidate_Description_DEFAULT
  }
return p.Description
}

func (p *Candidate) GetDelegators() []*Delegator {
  return p.Delegators
}
func (p *Candidate) IsSetDescription() bool {
  return p.Description != nil
}

func (p *Candidate) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Candidate)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Address = v
}
  return nil
}

func (p *Candidate)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PubKey = v
}
  return nil
}

func (p *Candidate)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Shares = v
}
  return nil
}

func (p *Candidate)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.VotingPower = v
}
  return nil
}

func (p *Candidate)  ReadField5(iprot thrift.TProtocol) error {
  p.Description = &CandidateDescription{}
  if err := p.Description.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Description), err)
  }
  return nil
}

func (p *Candidate)  ReadField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Delegator, 0, size)
  p.Delegators =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &Delegator{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Delegators = append(p.Delegators, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Candidate) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Candidate"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Candidate) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("address", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:address: ", p), err) }
  if err := oprot.WriteString(string(p.Address)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:address: ", p), err) }
  return err
}

func (p *Candidate) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pubKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pubKey: ", p), err) }
  if err := oprot.WriteString(string(p.PubKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pubKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pubKey: ", p), err) }
  return err
}

func (p *Candidate) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("shares", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:shares: ", p), err) }
  if err := oprot.WriteI64(int64(p.Shares)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.shares (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:shares: ", p), err) }
  return err
}

func (p *Candidate) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("votingPower", thrift.DOUBLE, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:votingPower: ", p), err) }
  if err := oprot.WriteDouble(float64(p.VotingPower)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.votingPower (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:votingPower: ", p), err) }
  return err
}

func (p *Candidate) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("description", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:description: ", p), err) }
  if err := p.Description.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Description), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:description: ", p), err) }
  return err
}

func (p *Candidate) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("delegators", thrift.LIST, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:delegators: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Delegators)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Delegators {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:delegators: ", p), err) }
  return err
}

func (p *Candidate) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Candidate(%+v)", *p)
}

// common exception
// @param errCode, error code
// @param errMsg, error message
// 
// Attributes:
//  - ErrCode
//  - ErrMsg
type Exception struct {
  ErrCode int32 `thrift:"errCode,1" db:"errCode" json:"errCode"`
  ErrMsg string `thrift:"errMsg,2" db:"errMsg" json:"errMsg"`
}

func NewException() *Exception {
  return &Exception{}
}


func (p *Exception) GetErrCode() int32 {
  return p.ErrCode
}

func (p *Exception) GetErrMsg() string {
  return p.ErrMsg
}
func (p *Exception) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Exception)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ErrCode = v
}
  return nil
}

func (p *Exception)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ErrMsg = v
}
  return nil
}

func (p *Exception) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Exception"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Exception) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("errCode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:errCode: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.errCode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:errCode: ", p), err) }
  return err
}

func (p *Exception) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("errMsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:errMsg: ", p), err) }
  if err := oprot.WriteString(string(p.ErrMsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.errMsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:errMsg: ", p), err) }
  return err
}

func (p *Exception) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Exception(%+v)", *p)
}

func (p *Exception) Error() string {
  return p.String()
}

