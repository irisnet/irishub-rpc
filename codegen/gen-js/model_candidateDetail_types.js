//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


CandidateDetailRequest = function(args) {
  this.address = null;
  this.pubKey = null;
  if (args) {
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
    if (args.pubKey !== undefined && args.pubKey !== null) {
      this.pubKey = args.pubKey;
    }
  }
};
CandidateDetailRequest.prototype = {};
CandidateDetailRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.pubKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CandidateDetailRequest.prototype.write = function(output) {
  output.writeStructBegin('CandidateDetailRequest');
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 1);
    output.writeString(this.address);
    output.writeFieldEnd();
  }
  if (this.pubKey !== null && this.pubKey !== undefined) {
    output.writeFieldBegin('pubKey', Thrift.Type.STRING, 2);
    output.writeString(this.pubKey);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CandidateDetailResponse = function(args) {
  this.candidate = null;
  if (args) {
    if (args.candidate !== undefined && args.candidate !== null) {
      this.candidate = new Candidate(args.candidate);
    }
  }
};
CandidateDetailResponse.prototype = {};
CandidateDetailResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.candidate = new Candidate();
        this.candidate.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CandidateDetailResponse.prototype.write = function(output) {
  output.writeStructBegin('CandidateDetailResponse');
  if (this.candidate !== null && this.candidate !== undefined) {
    output.writeFieldBegin('candidate', Thrift.Type.STRUCT, 1);
    this.candidate.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

